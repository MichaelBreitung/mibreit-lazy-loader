var d=Object.defineProperty;var a=(l,e,t)=>e in l?d(l,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):l[e]=t;var s=(l,e,t)=>a(l,typeof e!="symbol"?e+"":e,t);class o{constructor(e,t=0,n=1){s(this,"_currentIndex");s(this,"_loaderWindowLeft");s(this,"_loaderWindowRight");s(this,"_unloadedElementIndices",[]);s(this,"_elementLoaders");this._currentIndex=-1,this._elementLoaders=e,this._loaderWindowLeft=t,this._loaderWindowRight=n,this._updateUnloadedElementIndices()}async loadAll(){await this._loadElements(0,this._elementLoaders.length)}async setCurrentIndex(e){this._currentIndex!=e&&(this._currentIndex=e,await this._moveWindow())}async loadElement(e){if(e>=0&&e<this._elementLoaders.length){let t=!1;if(!this._unloadedElementIndices.includes(e))t=!0;else try{if(t=await this._elementLoaders[e].load(),t){const n=this._unloadedElementIndices.indexOf(e);n>-1&&this._unloadedElementIndices.splice(n,1)}}catch(n){t=n}return t}else throw new Error(`Preloader#loadElement -> invalid Index ${e}`)}getElementLoaderInfos(){return this._elementLoaders}getUnloadedElementIndices(){return this._unloadedElementIndices}async _moveWindow(){if(this._unloadedElementIndices.length){let e=this._currentIndex-this._loaderWindowLeft,t=this._currentIndex+1+this._loaderWindowRight;await this._loadElements(this._currentIndex,t<this._elementLoaders.length?t:this._elementLoaders.length),await this._loadElements(e>=0?e:0,this._currentIndex),e<0&&(e=this._elementLoaders.length+e,await this._loadElements(e,this._elementLoaders.length)),t>=this._elementLoaders.length&&(t=t-this._elementLoaders.length,await this._loadElements(0,t))}}async _loadElements(e,t){for(let n=e<0?0:e;n<t&&n<this._elementLoaders.length;n++)await this.loadElement(n)}_updateUnloadedElementIndices(){for(let e=0;e<this._elementLoaders.length;e++)this._elementLoaders[e].wasLoaded()||this._unloadedElementIndices.push(e)}}export{o as default};
